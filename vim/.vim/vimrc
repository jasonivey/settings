" vim: awa:sts=4:ts=4:sw=4:et:cin:fdm=manual:tw=120:ft=vim
" autowriteall, softtabstop, tabstop, shiftwidth, expandtab, cindent, foldmethod, textwidth, filetype
set nocompatible

" default is set to 200
set history=1000

" Move .viminfo into the .vim directory
if !isdirectory($HOME . "/.vim")
    call mkdir($HOME . "/.vim", "p")
endif
set viminfo=%,'100,n~/.vim/viminfo
"           | |    + viminfo file path
"           | + files marks saved
"           + save/restore buffer list

" Move backups and swp files to a dedicated location
if !isdirectory($HOME . "/.vim/backups")
    call mkdir($HOME . "/.vim/backups", "p")
endif
if !isdirectory($HOME . "/.vim/swapfiles")
    call mkdir($HOME . "/.vim/swapfiles", "p")
endif
set backupdir=$HOME/.vim/backups//
set directory=$HOME/.vim/swapfiles//
set swapfile
set writebackup

filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle
call vundle#begin()
Plugin 'gmarik/vundle'
Plugin 'bling/vim-bufferline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'arzg/vim-colors-xcode'
" the editor config plugin
Plugin 'editorconfig/editorconfig-vim'
Plugin 'ctrlpvim/ctrlp.vim'
" Plugin for making cmake projects easier
Plugin 'vhdirk/vim-cmake'
" awesome Python autocompletion
Plugin 'davidhalter/jedi-vim'
" activate and deactivate the pyenv Python
Plugin 'lambdalisue/vim-pyenv'
" Asynchronous Lint Engine provides Python linting
Plugin 'dense-analysis/ale'
" Plugin for go-lang
Plugin 'fatih/vim-go'
" Syntax Checker for Python, Rust, go... see below
" Plugin 'vim-syntastic/syntastic'
Plugin 'vim-scripts/indentpython.vim'
" Code completion for C/C++
Plugin 'Valloric/YouCompleteMe.git'
Plugin 'scrooloose/nerdtree.git'
Plugin 'scrooloose/nerdcommenter.git'
Plugin 'rhysd/vim-clang-format.git'
" Indent line plugin where indent marks are shown throughout the source file
Plugin 'Yggdroot/indentLine'
" Better JSON for VIM -- distinct highlighting of keywords vs values. JSON-specific warnings and quote concealing.
Plugin 'elzr/vim-json'
" Add support for . repeat commands
Plugin 'tpope/vim-repeat'
" Add support for various shortcuts
Plugin 'tpope/vim-unimpaired'
" Add git support inside vim
Plugin 'tpope/vim-fugitive.git'
" Add ripgrep commands inside vim
Plugin 'jremmen/vim-ripgrep'
" Highlights trailing whitespace in red -- call :FixWhitespace to strip
Plugin 'bronson/vim-trailing-whitespace'
" Add :Bclose will close and destroy buffer
Plugin 'rbgrouleff/bclose.vim.git'
" Open the tldr abbreviated man page for a command
Plugin 'wlemuel/vim-tldr'
" Open header of the source file you are in
Plugin 'a.vim'
call vundle#end()

" create a custom command SortLine which will take a line and sort the words
command -nargs=0 -range SortLine <line1>,<line2>call setline('.',join(sort(split(getline('.'),' ')),' '))

let python3_path = system('command -v python3')
if shell_error == 0
  let g:ycm_python_binary_path = join([substitute(python3_path, "\n", "", "")[:-(len("python3") + 1)], "python"], "")
else
  let g:ycm_python_binary_path = 'python'
endif


" Always set encoding to utf-8
set encoding=utf-8
set termencoding=utf-8
set t_Co=256

" Set colorscheme (i.e. theme)
colorscheme xcodelighthc

" Enable true color 启用终端24位色
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set term=xterm-256color

if has("gui_running") && has("gui_macvim")
  set guifont=MesloLGS-NF-Regular:h11
endif

" xcode-light-hc theme settings
let g:xcodelighthc_green_comments=1
let g:xcodelighthc_emph_types=1
let g:xcodelighthc_emph_funcs=1
let g:xcodelighthc_emph_idents=1
let g:xcodelighthc_match_paren_style=1
let g:xcodelighthc_dim_punctuation=0

" Airline settings
let g:Powerline_symbols='unicode'
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled=1
let g:laststatus=2
let g:airline_theme='molokai'

" Syntastic Plugin Modifications
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_python_checkers=['pylint', 'flake8']
"let g:syntastic_aggregate_errors=1
"let g:syntastic_always_populate_loc_list=1
"let g:syntastic_auto_loc_list=1
"let g:syntastic_check_on_open=1
"let g:syntastic_check_on_wq=0
"let python_highlight_all=1

" ALE settings
let g:ale_linters={
  \   'csh': ['shell'],
  \   'go': ['gofmt', 'golint', 'go vet'],
  \   'python': ['flake8', 'mypy', 'pylint', 'pyright'],
  \   'rust': ['cargo', 'rls'],
  \   'zsh': ['shell'],
  \}
let g:ale_fixers={'python': ['autopep8', 'yapf']}
let g:ale_fix_on_save=1
let g:ale_warn_about_trailing_whitespace=1
let g:airline#extensions#ale#enabled=1

let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_color_term = 239
let g:indentLine_noConcealCursor=""

" Enable code file customization with modelines
set modeline
set modelines=5

set noautochdir

" Remap the leader key from \ to ,
let mapleader=","

" Map <ctrl-l> to turn off highlighting the search terms
noremap <silent> <c-l> :nohls<cr><c-l>

" Remap F4 <next> and Shift-F4 <previous> to step through the quickfind results
nnoremap <S-F4> :cp<CR>
nnoremap <F4> :cn<CR>

" Remap visual delete, yank and paste which places it into a named register "0.
"  This overcomes the issue where a paste from a visual yank/delete overwrites
"  the selected text BUT the newly overwritten text is then placed in the new
"  default register.  Instead, the original text which was pasted is still in
"  the named register which can be pasted again, and again, and again...
vnoremap p "0p
vnoremap P "0P
vnoremap y "0y
vnoremap d "0d

" Set the line wrap
set nowrap

" Auto indent
set autoindent

" Tab settings
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set listchars=tab:›·,trail:·,extends:›,precedes:‹
set list

set completeopt=longest

" Set case insensitivity
set ignorecase

" Unless there's a capital letter
set smartcase

" Highlight the search
set hlsearch

" Highlight as we search however
set incsearch

" Blink matching chars for .x seconds
set matchtime=5

" Turn on the line and offset markers in the bottom right corner
set ruler

" No error bells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Automatically reload file when changed from outside
set autoread

" w!! to save file with sudo.
cmap w!! w !sudo tee % > /dev/null

" restore previous cursor position
au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") && &filetype != "gitcommit" |
        \ execute("normal `\"") |
    \ endif

" Fix the backspace key
set backspace=2

" set the ctags location
set tags=./tags,./TAGS,tags;~,TAGS;~

filetype plugin indent on

" Activate syntax highlighting
syntax on

" Not sure why, but these theme/color customizations must after the above two lines
highlight ColorColumn ctermbg=cyan guibg=cyan
highlight LineNr term=NONE cterm=NONE ctermbg=NONE ctermfg=black guibg=NONE guifg=black
highlight clear CursorLine
highlight CursorLine term=underline cterm=underline gui=underline ctermbg=NONE guibg=NONE

" Highlight current line
set cursorline
" Create a virtical column to makr a 120 characters
set colorcolumn=120
" Show line numbers
set number

" Add bindings for clang-format
let g:clang_format#command ='clang-format'
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>

" ripgrep options
let g:rg_highlight=1
let g:rg_derive_root=1
let g:rg_root_types=['.git','.hg','.svn','.bzr']

" Adjust YouCompleteMe options
let g:ycm_auto_hover=0
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_goto_buffer_command='vertical-split'
nnoremap <leader>gt :YcmCompleter GoTo<CR>
nnoremap <F12> :YcmCompleter GoToDefinition<CR>
nnoremap <S-F12> :YcmCompleter GoToDeclaration<CR>

" Adjust NERDTree to always show hidden files
let g:NERDChristmasTree       = 1
let g:NERDTreeQuitOnOpen      = 1
let g:NERDTreeShowHidden      = 1
let g:NERDTreeMapToggleHidden = 'h'
let g:NERDTreeMapQuit         = 'q'
let g:NERDTreeMapToggleZoom   = 'z'
nnoremap <Leader>n :NERDTreeToggle<CR>

" Close the auto-complete tip window after selection
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Adjust the NERDCommenter settings
let g:NERDRemoveExtraSpaces=0  " if value=1 '// int a = 0;' will uncomment to 'int a = 0;'
let g:NERDDefaultNesting=0     " disable the ability to comment block and then comment again nesting them
map <Leader>c <plug>NERDCommenterAlignLeft
map <Leader>u <plug>NERDCommenterUncomment

filetype plugin on

" Set up the auto tab and indent settings for the following types
autocmd FileType make set noexpandtab
autocmd Filetype c,cpp,cs,java,objc,php,py set cindent tabstop=4 softtabstop=4 shiftwidth=4 expandtab

" CTRL-P Settings
let g:ctrlp_map='<Leader>t'
let g:ctrlp_max_files=200000
let g:ctrlp_show_hidden=1
set wildignore+=*.o,*.d,*.git,CMakeFiles
