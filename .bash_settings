#!/bin/bash
# vim:softtabstop=4:ts=4:sw=4:expandtab:tw=120

# history settings
export HISTTIMEFORMAT='%F %T '
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=4096                     # custom history size
export HISTFILESIZE=100000               # custom history file size
shopt -s histappend                      # append to history, don't overwrite it

# Global Unix type paths 
export PATH="$HOME/settings:$HOME/scripts:$PATH"

if [ "$(uname)" == "Darwin" ]; then

    # if using MacOS Catalina then the command prompt will issue a message about switching to zsh -- silence this!
    MACOS_CATALINA_MINOR_VER=15
    macos_minor_ver=$(sw_vers -productVersion | awk -F. '{print $2}')
    if [[ "$macos_minor_ver" -ge "$MACOS_CATALINA_MINOR_VER" ]]; then
        export BASH_SILENCE_DEPRECATION_WARNING=1
        #echo "In macos Catalina and silencing the deprication warning"
    #else
        #echo "In macos before Catalina and not deprecating the warning"
    fi

    export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'

    # add bash_completion when in Mac using the $(brew --prefix) path
    if [ -e /usr/local/bin/brew ]; then
        if [ -f $(brew --prefix)/etc/bash_completion ]; then
            . $(brew --prefix)/etc/bash_completion
        fi
    fi
   
    # add git-completion to the environment
    if [ -f $HOME/settings/git-completion.bash ]; then
        . $HOME/settings/git-completion.bash
    fi

    # add gem home location so sudo access isn't required
    #export GEM_HOME=$HOME/.gem
    #export PATH="$GEM_HOME/bin:$PATH"

elif [ "$(uname -s)" == "Linux" ]; then

    # prompt_command is a callback which is called right before the prompt is printed
    # this sets the tab title to the current working directory in iTerm2
    if [ "$(lsb_release -sc)" == "precise" ]; then
        export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'
    else
        export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/\~}\007"'
    fi

fi

# RipGrep needs to know where its configuration file is located
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# setting the PS1 environment variable will set the prompt to a specific color and the working directory
function set_prompt {
    local BLACK="\[\033[0;30m\]"
    local BLACKBOLD="\[\033[1;30m\]"
    local RED="\[\033[0;31m\]"
    local REDBOLD="\[\033[1;31m\]"
    local GREEN="\[\033[0;32m\]"
    local GREENBOLD="\[\033[1;32m\]"
    local YELLOW="\[\033[0;33m\]"
    local YELLOWBOLD="\[\033[1;33m\]"
    local BLUE="\[\033[0;34m\]"
    local BLUEBOLD="\[\033[1;34m\]"
    local PURPLE="\[\033[0;35m\]"
    local PURPLEBOLD="\[\033[1;35m\]"
    local CYAN="\[\033[0;36m\]"
    local CYANBOLD="\[\033[1;36m\]"
    local WHITE="\[\033[0;37m\]"
    local WHITEBOLD="\[\033[1;37m\]"
    local RESETCOLOR="\[\e[00m\]"

    export PS1="$BLUE\w$RED"'$(vcprompt -n -f %s:%b[%a%m%u])'"$BLUE â†’ $RESETCOLOR"
}

if [ "$(uname -s)" == "Linux" ]; then
    test -r $HOME/.dircolors && eval "$(dircolors $HOME/.dircolors)"
fi

# utility function to generate cscope output
function set_cscope {
    local CWD=`pwd`
    pushd $CWD > /dev/null
    cd /
    eval `find $CWD -name '*.c' -o -name '*.cpp' -o -name '*.h' -o -name '*.hpp' > $CWD/cscope.files`
    popd > /dev/null
    eval `cscope -b`
}

function move_into_dev {
    cd $HOME/dev/$@
}

function set_tab_color {
    if [ -e "$HOME/settings/.bash_color" ]; then
        tab-$(head -n 1 $HOME/settings/.bash_color)
    fi
}

# Check for the existense of a binary on the system
function does_binary_exist {
    `command -v $1 >/dev/null 2>&1`
    local retval=$?
    #echo "retval is $retval"
    if [[ $retval -eq 0 ]]; then
        return $true
    else
        return $false
    fi
}

# User specific aliases and functions
if type nvim > /dev/null 2>&1; then
    alias vim='nvim'
fi
alias settings='vim $HOME/settings/.bash_settings'
alias setting='cd $HOME/settings'
alias x='exit'
alias df='df -h'
alias cp='cp -i'
alias mv='mv -i'
alias ide='vim -O3'
alias edit='vim'
alias view='vim'
alias macvim='function __macvim() { `/usr/local/Cellar/macvim/8.1-151/MacVim.app/Contents/bin/mvim -O $*`; unset -f __macvim; }; __macvim'
alias cpwp='rsync -aP'
alias mvwp='rsync -aP --remove-source-files'
alias update-path='export PATH=$PATH:`pwd`'
alias brewup='brew update; brew upgrade; brew prune; brew cleanup; brew doctor'
alias pylint='pylint -r n --rcfile=~/settings/pylintrc'
alias set-cscope=set_cscope
alias setup-intel='source /opt/intel/bin/iccvars.sh -arch intel64 -platform linux'
alias update='sudo apt-get update'
alias upgrade='sudo apt-get dist-upgrade'
alias dev=move_into_dev
alias devprep='ctags -R > /dev/null 2>&1; yes | cp -vf $HOME/dev/.ycm_extra_conf.py . > /dev/null 2>&1; yes | cp -vf $HOME/dev/.color_coded . > /dev/null 2>&1'
alias set-tab-color=set_tab_color
alias integrate='$HOME/settings/integrate.sh'
alias build='$HOME/settings/build.sh'
alias iclean='$HOME/settings/clean.sh'
alias isetup='dvm run BUILD_TYPE=Debug ./cmake-init.sh; ctags --fields=+l -R --exclude=.git --exclude=external --exclude=common/zdw/googletest-release-1.8.0 --exclude=*.inc --exclude=*.php; python $HOME/dev/scripts/update_compile_commands.py'
alias isetup-old='dvm run BUILD_TYPE=Debug ./cmake-init.sh; ctags --fields=+l -R --exclude=.git --exclude=external/fmt-4.1.0/doc; python $HOME/dev/scripts/update_compile_commands.py'
alias ibuild='dvm run make -j8'
alias itest='dvm run GTEST_COLOR=1 make test ARGS="-V"'
alias matrix='cmatrix -bs -C red'
alias gitls="bash $HOME/settings/gitls/gitls"
alias 7zenc='7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on -mhe=on -p'
alias 7ztest='7z l -slt'
alias 7zdec='7z x'
alias transmission-cli='transmission-remote-cli --config=$HOME/.transmission-remote-cli.config'
alias cls='clear && echo -en "\e[3J"'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'
alias ........='cd ../../../../../../..'
alias .........='cd ../../../../../../../..'
alias ..........='cd ../../../../../../../../..'

if [ "$(uname)" == "Darwin" ]; then
    alias ls='exa --all --long --header --group --sort=.Name --time-style=long-iso --git'
    alias dir='exa --all --long --header --group --sort=.Name --time-style=long-iso --git'
    #if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    #    alias rm='rm -i'
    #else
    #    alias rm='trash'
    #    alias del='rm -i'
    #fi
elif [ "$(uname -s)" == "Linux" ]; then
    alias ls='exa --all --long --header --group --sort=.Name --time-style=long-iso --git'
    alias dir='exa --all --long --header --group --sort=.Name --time-style=long-iso --git'
    alias rm='rm -i'
fi

if [ -e "$HOME/settings/.ssh_aliases" ]; then
    source $HOME/settings/.ssh_aliases
fi

# functions to set the color of the tab in iTerm2
function tab-blank() { echo -n -e "\033]6;1;bg;*;default\a" ; }
function tab-lime() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;green;brightness;255\a" ; }
function tab-red() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a" ; }
function tab-blue() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;blue;brightness;255\a" ; }
function tab-yellow() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a\033]6;1;bg;green;brightness;255\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-purple() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a\033]6;1;bg;green;brightness;0\a\033]6;1;bg;blue;brightness;255\a" ; }
function tab-orange() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-aqua() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;255\a\033]6;1;bg;blue;brightness;255\a" ; }
function tab-redder() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;128\a\033]6;1;bg;green;brightness;0\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-olive() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;128\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-green() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-teal() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;128\a" ; }
function tab-navy() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;0\a\033]6;1;bg;blue;brightness;128\a" ; }

set_tab_color
set_prompt

# for each new bash shell print out the hostname and network information
if [ -e "$HOME/scripts/network_info.py" ]; then
    python3 $HOME/scripts/network_info.py
else
    echo "TODO: add the scripts repositoy to $HOME/scripts"
fi

