#!/usr/bin/env bash
# vim: awa:sts=4:ts=4:sw=4:et:cin:fdm=manual:tw=120:ft=bash

# Pulled manually out of .bashrc after doing conda setup
if [ -d $HOME/anaconda3 ]; then
    # >>> conda initialize >>>
    # !! Contents within this block are managed by 'conda init' !!
    __conda_setup="$('$HOME/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
            . "$HOME/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="$HOME/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
    # <<< conda initialize <<<
fi

if [[ -v "TERM" && ( "$TERM" == "linux" || "$TERM" == "xterm" ) ]] ; then
    # Its either not defined or its defined to xterm or linux
    export TERM=xterm-256color
fi

# history settings
export HISTTIMEFORMAT='%F %T '
export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
export HISTSIZE=4096                     # custom history size
export HISTFILESIZE=100000               # custom history file size
shopt -s histappend                      # append to history, don't overwrite it

# Global Unix type paths
export PATH=.:$PATH
export PATH=$HOME/settings:$PATH
export PATH=$HOME/scripts:$PATH
export PATH=$HOME/.local/bin:$PATH
export PATH=$HOME/.cargo/bin:$PATH

if [ "$(uname)" == "Darwin" ]; then
    # Setup JAVA environment variables
    export JAVA_HOME="/System/Library/Frameworks/JavaVM.framework/Versions/Current"
    export PATH=$JAVA_HOME/Commands:$PATH

    # Setup LLVM/clang C++ environment variables
    export LDFLAGS="-L/usr/local/opt/llvm/lib"
    export CPPFLAGS="-I/usr/local/opt/llvm/include"
    export PATH=/usr/local/opt/llvm/bin:$PATH

    # Setup ruby binaries before system ruby
    export PATH=/usr/local/opt/ruby/bin:$PATH

    # Setup Python-3.7 environment variables
    export PATH=$HOME/Library/Python/3.7/bin:$PATH

    # Setup MacVim environment variables
    export PATH=/Applications/MacVim.app/Contents/bin:$PATH

    # Setup MacVim as the editor of choice
    if [ -n $SSH_CONNECTION ]; then
        export EDITOR='vim'
    else
        export EDITOR='mate'
    fi
elif [ "$(uname -s)" == "Linux" ]; then
    # Setup JAVA environment variables
    export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
    export PATH=$JAVA_HOME/bin:$PATH

    # Setup nix-env environment variables
    export PATH=$HOME/.nix-profile/bin:$PATH

    # Setup vim as the editor of choice
    export EDITOR='vim'
fi

# Setup the bat (replacement for cat) settings
export BAT_CONFIG_PATH=$HOME/.config/bat/bat.conf
export BAT_THEME="zenburn"
export BAT_PAGER="less -RFX"
export PAGER="less -RFX"

# RipGrep needs to know where its configuration file is located
export RIPGREP_CONFIG_PATH=$HOME/.config/ripgrep/.ripgreprc

# Setup golang environment variables
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$PATH

if [ "$(uname)" == "Darwin" ]; then

    # if using MacOS Catalina then the command prompt will issue a message about switching to zsh -- silence this!
    MACOS_CATALINA_MINOR_VER=15
    macos_minor_ver=$(sw_vers -productVersion | awk -F. '{print $2}')
    if [[ "$macos_minor_ver" -ge "$MACOS_CATALINA_MINOR_VER" ]]; then
        export BASH_SILENCE_DEPRECATION_WARNING=1
        #echo "In macos Catalina and silencing the deprication warning"
    #else
        #echo "In macos before Catalina and not deprecating the warning"
    fi

    export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'

    # add bash_completion when in Mac using the $(brew --prefix) path
    if [ -e /usr/local/bin/brew ]; then
        if [ -f $(brew --prefix)/etc/bash_completion ]; then
            . $(brew --prefix)/etc/bash_completion
        fi
    fi

    # add git-completion to the environment
    if [ -f $HOME/settings/git-completion.bash ]; then
        . $HOME/settings/git-completion.bash
    fi

    # add gem home location so sudo access isn't required
    #export GEM_HOME=$HOME/.gem
    #export PATH="$GEM_HOME/bin:$PATH"

elif [ "$(uname -s)" == "Linux" ]; then

    # prompt_command is a callback which is called right before the prompt is printed
    # this sets the tab title to the current working directory in iTerm2
    if [ "$(lsb_release -sc)" == "precise" ]; then
        export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007"'
    else
        export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/\~}\007"'
    fi

fi

# functions to set the color of the tab in iTerm2
function tab-blank() { echo -n -e "\033]6;1;bg;*;default\a" ; }
function tab-lime() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;green;brightness;255\a" ; }
function tab-red() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a" ; }
function tab-blue() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;blue;brightness;255\a" ; }
function tab-yellow() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a\033]6;1;bg;green;brightness;255\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-purple() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a\033]6;1;bg;green;brightness;0\a\033]6;1;bg;blue;brightness;255\a" ; }
function tab-orange() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;255\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-aqua() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;255\a\033]6;1;bg;blue;brightness;255\a" ; }
function tab-redder() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;128\a\033]6;1;bg;green;brightness;0\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-olive() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;128\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-green() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;0\a" ; }
function tab-teal() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;128\a\033]6;1;bg;blue;brightness;128\a" ; }
function tab-navy() { echo -n -e "\033]6;1;bg;*;default\a\033]6;1;bg;red;brightness;0\a\033]6;1;bg;green;brightness;0\a\033]6;1;bg;blue;brightness;128\a" ; }

# setting the PS1 environment variable will set the prompt to a specific color and the working directory
function set_prompt {
    local BLACK="\[\033[0;30m\]"
    local BLACKBOLD="\[\033[1;30m\]"
    local RED="\[\033[0;31m\]"
    local REDBOLD="\[\033[1;31m\]"
    local GREEN="\[\033[0;32m\]"
    local GREENBOLD="\[\033[1;32m\]"
    local YELLOW="\[\033[0;33m\]"
    local YELLOWBOLD="\[\033[1;33m\]"
    local BLUE="\[\033[0;34m\]"
    local BLUEBOLD="\[\033[1;34m\]"
    local PURPLE="\[\033[0;35m\]"
    local PURPLEBOLD="\[\033[1;35m\]"
    local CYAN="\[\033[0;36m\]"
    local CYANBOLD="\[\033[1;36m\]"
    local WHITE="\[\033[0;37m\]"
    local WHITEBOLD="\[\033[1;37m\]"
    local RESETCOLOR="\[\e[00m\]"

    export PS1="$BLUE\w$RED"'$(vcprompt -n -f %s:%b[%a%m%u])'"$BLUE → $RESETCOLOR"
}

if [ "$(uname -s)" == "Linux" ]; then
    test -r $HOME/.dircolors && eval "$(dircolors $HOME/.dircolors)"
elif [ "$(uname -s)" == "Darwin" ]; then
    # If we are in Mac OSX see if the brew package coreutils has been installed
    test -r $HOME/.dircolors && $(command -v gdircolors > /dev/null 2>&1) && eval "$(gdircolors $HOME/.dircolors> /dev/null 2>&1)"
fi

function get_date_time {
    if [ "$(uname -s)" == "Linux" ]; then
        echo $(date +"%A, %d %b %Y → %I:%M:%S %P (%Z)")
    elif [ "$(uname -s)" == "Darwin" ]; then
        echo $(date +"%A, %d %b %Y → %I:%M:%S %P (%Z)")
    fi
}

function set_cscope {
    eval `find . -name '*.c' -o -name '*.cpp' -o -name '*.h' -o -name '*.hpp' > ./cscope.files`
    eval `cscope -b`
}

function move_into_dev {
    cd $HOME/dev/$@
}

function set_tab_color {
    if [ -e "$HOME/settings/.bash_color" ]; then
        tab-$(head -n 1 $HOME/settings/.bash_color)
    fi
}

get_login_info() {
    if [ -e "$HOME/scripts/login_info.py" ]; then
        python3 $HOME/scripts/login_info.py
    fi
}

get_network_info() {
    if [ -e "$HOME/scripts/network_info.py" ]; then
        python3 $HOME/scripts/network_info.py
    fi
}

get_weather_info() {
    if [ -e "$HOME/scripts/weather_info.py" ]; then
        python3 $HOME/scripts/weather_info.py
    fi
}

get_full_weather_info() {
    if [ -e "$HOME/scripts/weather_info.py" ]; then
        python3 $HOME/scripts/weather_info.py --full-report
    fi
}

get_confirmation() {
    read -r -p "$1 [Y/n]? " RESPONSE
    RESPONSE=${RESPONSE,,}
    if [[ $RESPONSE =~ ^(yes|y| ) ]] || [[ -z $RESPONSE ]]; then
        echo 1;
    else
        echo 0;
    fi
}

restart_now() {
    confirmation=$(expr $(get_confirmation "Reboot now") + 0)
    if (( $confirmation == 1 )); then
        echo "Rebooting now ...1..2..3..."
        if [ "$(uname)" == "Darwin" ]; then
            # Shows no confirmation dialog
            osascript -e 'tell app "System Events" to restart'
            # Shows a confirmation dialog
            #osascript -e 'tell app "loginwindow" to «event aevtrrst»'
        else
            systemctl reboot
        fi
    else
        echo "Not rebooting now..."
    fi
}

shutoff_now() {
    confirmation=$(expr $(get_confirmation "Shutdown now") + 0)
    if (( $confirmation == 1 )); then
        echo "Shutting down now ...1..2..3..."
        if [ "$(uname)" == "Darwin" ]; then
            # Shows no confirmation dialog
            osascript -e 'tell app "System Events" to shut down'
            # Shows a confirmation dialog
            #osascript -e 'tell app "loginwindow" to «event aevtrsdn»'
        else
            systemctl halt
        fi
    else
        echo "Not shutting down now..."
    fi
}

# User specific aliases and functions
if [ "$(uname)" == "Darwin" ]; then
    alias settings="vim \"$HOME/settings/.bash_settings\""
else
    alias update="sudo apt-get update"
    alias upgrade="sudo apt-get dist-upgrade"
    alias setup-intel="source /opt/intel/bin/iccvars.sh -arch intel64 -platform linux"
fi

alias setting-dir="cd \"$HOME/settings\""
alias x="exit"
alias df="df -h"
alias cp="cp -i"
alias mv="mv -i"
alias rm="rm -i"
alias ide="vim -O3"
alias cpwp="rsync -aP"
alias mvwp="rsync -aP --remove-source-files"
alias update-path="export PATH=\"`pwd`:$PATH\""
alias brewup="brew update; brew upgrade; brew prune; brew cleanup; brew doctor"
alias pylint="pylint -r n --rcfile=$HOME/pylintrc"
alias set-cscope=set_cscope
alias dev=move_into_dev
alias devprep="ctags -R > /dev/null 2>&1; yes | cp -vf $HOME/dev/.ycm_extra_conf.py . > /dev/null 2>&1; yes | cp -vf $HOME/dev/.color_coded . > /dev/null 2>&1"
alias transmission-cli="transmission-remote-cli --config=$HOME/.transmission-remote-cli.config"
alias set-tab-color=set_tab_color
alias matrix="cmatrix -bs -C red"
alias weather=get_full_weather_info
alias netinfo=get_network_info
alias gitls="/usr/bin/env bash $HOME/settings/gitls/gitls"
alias markdown="mdless -c -I"
alias 7zenc="7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on -mhe=on -p"
alias 7ztest="7z l -slt"
alias 7zdec="7z x"
alias cls="clear && echo -en \"\e[3J\""
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."
alias .......="cd ../../../../../.."
alias ........="cd ../../../../../../.."
alias .........="cd ../../../../../../../.."
alias ..........="cd ../../../../../../../../.."
alias twopanes="itermocil --here two_panes"

alias service-start="sudo systemctl stop"
alias service-stop="sudo systemctl start"
alias service-resstart="sudo systemctl restart"
alias service-is-active="sudo systemctl is-active"
alias service-status="sudo systemctl status"
alias restart=restart_now
alias shutoff=shutoff_now

# special git diff alias to use my custom difftool
alias gd="PAGER='less -RF' git difftool"

if [ $(command -v exa) ]; then
    alias  ls="unbuffer exa --all --long --header --group --links --sort=Name --time-style=default --git --icons"
    alias  la="unbuffer exa --all --long --header --group --links --sort=Name --time-style=default --git --icons"
    alias   l="unbuffer exa --all --all --long --header --group --links --sort=Name --time-style=default --git --icons"
    alias  ll="unbuffer exa --long --header --group --links --sort=Name --time-style=default --git --icons"
    alias lsa="unbuffer exa --all --all --long --header --group --links --sort=Name --time-style=default --git --icons"
    alias dir="unbuffer exa --all --long --header --group --links --sort=.Name --time-style=default --git --icons"
    alias lst="unbuffer exa --all --long --header --group --links --sort=oldest --time-style=default --git --icons"
elif [ $(command -v lsd) ]; then
    alias  ls="unbuffer lsd --almost-all --long"
    alias  la="unbuffer lsd --almost-all --long"
    alias   l="unbuffer lsd --all --long"
    alias  ll="unbuffer exa --long"
    alias lsa="unbuffer exa --all --long"
    alias dir="unbuffer lsd --almost-all --long"
    alias lst="unbuffer lsd --almost-all --long --timesort"
elif [ $(command -v gls) ]; then
    # On Mac OSX our last chance of getting into the else loop is if the coreutils brew package has been installed
    #  and we can use the gnu-ls binary.
    alias  ls="gls --almost-all -l --human-readable --color=always"
    alias  la="gls --almost-all -l --human-readable --color=always"
    alias   l="gls --all -l --human-readable --color=always"
    alias  ll="gls -l --human-readable --color=always"
    alias lsa="gls --all -l --human-readable --color=always"
    alias dir="gls --almost-all -l --human-readable --color=always"
    alias lst="gls --almost-all -l --human-readable --color=always -t"
else
    if [ "$(uname)" == "Darwin" && ! $(/bin/ls --help > /dev/null 2>&1) ]; then
        # On Mac OSX the ls included only takes short options and will not allow help -- pile of garbage
        alias  ls="/bin/ls -AlGh"
        alias  la="/bin/ls -AlGh"
        alias   l="/bin/ls -alGh"
        alias  ll="/bin/ls -lGh"
        alias lsa="/bin/ls -alGh"
        alias dir="/bin/ls -AlGh"
        alias lst="/bin/ls -AlGht"
    else
        alias  ls="/bin/ls --almost-all -l --human-readable --color=always"
        alias  la="/bin/ls --almost-all -l --human-readable --color=always"
        alias   l="/bin/ls --all -l --human-readable --color=always"
        alias  ll="/bin/ls -l --human-readable --color=always"
        alias lsa="/bin/ls --all -l --human-readable --color=always"
        alias dir="/bin/ls --almost-all -l --human-readable --color=always"
        alias lst="/bin/ls --almost-all -l --human-readable --color=always -t"
    fi
fi

if [ -e "$HOME/settings/.ssh_aliases" ]; then
    source $HOME/settings/.ssh_aliases
fi

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2)" scp sftp ssh

# Add bash completions and all other completions which are location in BASH_COMPLETION_COMPAT_DIR
export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

# The following needs defined if we going to process AsciiDoc files through an XML stage (like a2x to create manpage)
export XML_CATALOG_FILES=/usr/local/etc/xml/catalog

set_tab_color
set_prompt

get_login_info
